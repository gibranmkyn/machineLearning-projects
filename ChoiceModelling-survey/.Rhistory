rm(list = ls()) # cleans the memory
library(tidyverse)
sportscar <- read.csv('sportscar_choice_long.csv')
sportscar
# ----- EDA
summary(sportscar)
plot_histogram(sportscar)
library(DataExplorer)
# ----- import data
sportscar <- read.csv('sportscar_choice_long.csv')
# ----- EDA
summary(sportscar)
plot_histogram(sportscar)
pairs(sportscar, panel=panel.smooth)
plot_correlation(sportscar)
leves(sat)
leves(seat)
levels(seat)
levels(sportscar$seat)
# ----- EDA
str(sportscar)
levels(sportscar$seat)
levels(sportscar$seat)
sportscar$seat <- as.factor(sportscar$seat)
# ----- data cleaning
sportscar$seat <- as.factor(sportscar$seat)
levels(sportscar$seat)
# Create a table of chosen sportscars by transmission type
chosen_by_trans <- xtabs(choice ~ trans, data = sportscar) # sum up the choice variable for each level of the trans variable.
# Print the chosen_by_trans table to the console
chosen_by_trans
# Plot the chosen_by_trans object
barplot(chosen_by_trans)
install.packages('mlogit')
library(mlogit)
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice ~ seat + trans + convert + price, data=sportscar)
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice ~ seat + trans + convert + price, data=sportscar)
library(mlogit)
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice ~ seat + trans + convert + price, data=sportscar)
sportscar$choice <- as.logical(sportscar$seat)
sportscar$choice
# ----- import data
sportscar <- read.csv('sportscar_choice_long.csv')
sportscar$seat <- as.factor(sportscar$seat)
sportscar$choice <- as.factor(sportscar$seat)
sportscar
sportscar_wide <- read.csv('sportscar_choice_wide.csv')
sportscar_wide
sportscar
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice ~ seat + trans + convert + price, data=sportscar)
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice ~ seat + trans + convert + price, data=sportscar)
sportscar
# ----- import data
sportscar <- read.csv('sportscar_choice_long.csv')
sportscar_wide <- read.csv('sportscar_choice_wide.csv')
# ----- data cleaning
sportscar$seat <- as.factor(sportscar$seat)
sportscar
sportscar
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice ~ seat + trans + convert + price, data=sportscar)
sportscar
sportscar$choice_log <- as.logical(sportscar$choice)
sportscar$choice_log
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice ~ seat + trans + convert + price, data=sportscar)
sportscar
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice_log ~ seat + trans + convert + price, data=sportscar)
sportscar
# Create a table of chosen sportscars by transmission type
chosen_by_trans <- xtabs(choice ~ trans, data = sportscar) # sum up the choice variable for each level of the trans variable.
# Print the chosen_by_trans table to the console
chosen_by_trans
# Plot the chosen_by_trans object
barplot(chosen_by_trans)
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice_log ~ seat + trans + convert + price, data=sportscar)
sportscar
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice_log ~ seat + trans + convert + price, data=sportscar)
library(mlogit)
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice_log ~ seat + trans + convert + price, data=sportscar)
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice_log ~ seat + trans + convert + price, data=sportscar)
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice_log ~ seat + trans + convert + price, method='nr', data=sportscar)
sportscar
sportscar$choice_log
count(sportscar$choice_log)
n(sportscar$choice_log)
summary(sportscar$choice_log)
summary(sportscar$seat)
summary(sportscar$convert)
# summarize the m1 object to see the output of the choice model
summary(m1)
# summarize the m1 object to see the output of the choice model
summary(m1)
summary(sportscar$price)
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice_log ~ seat + trans + convert + price, data=sportscar)
# fit a choice model using mlogit() and assign the output to m1
m1 <- mlogit(choice ~ seat + trans + convert + price, data=sportscar)
chocolate_wide <- read.csv('chocolate_choice_wide.csv')
nrow(chocolate_wide)
head(chocolate_wide)
chocolate_wide %>% filter(Subject = 2408)
chocolate_wide %>% filter(Subject = 2408)
chocolate_wide %>% filter(Subject == 2408)
chocolate_wide %>% filter(Subject == 2408, Trial == 3)
# use reshape() to change the data from wide to long
chocolate <- reshape(data= chocolate_wide , direction="long",
varying = list(Brand=3:5, Price=6:8, Type=9:11),
v.names=c("Brand", "Price", "Type"), timevar="Alt")
# use head() to confirm that the data has been properly transformed
head(chocolate)
# use reshape() to change the data from wide to long
chocolate <- reshape(data= chocolate_wide , direction="long",
varying = list(Brand=3:5, Price=6:8, Type=9:11),
v.names=c("Brand", "Price", "Type"), timevar="Alt")
# Create the new order for the chocolate data frame
new_order <- order(chocolate$Subject, chocolate$Trial, chocolate$Alt)
# Reorder the chocolate data frame to the new_order
chocolate <- chocolate[new_order,]
# Look at the head() of chocolate to see how it has been reordered
head(chocolate)
# use reshape() to change the data from wide to long
chocolate <- reshape(data= chocolate_wide , direction="long",
varying = list(Brand=3:5, Price=6:8, Type=9:11),
v.names=c("Brand", "Price", "Type"), timevar="Alt")
# Create the new order for the chocolate data frame
new_order <- order(chocolate$Subject, chocolate$Trial, chocolate$Alt)
# Reorder the chocolate data frame to the new_order
chocolate <- chocolate[new_order,]
# Transform the Selection variable to a logical indicator
chocolate$Selection <- chocolate$Alt == chocolate$Selection
# Look at the head() of chocolate to see how it has been reordered
head(chocolate)
# Use xtabs to count up how often each Type is chosen
counts <- xtabs(~ Type + Selection, data=chocolate)
# Plot the counts
plot(counts, cex = 1.5)
# Use xtabs to count up how often each Type is chosen
counts_type <- xtabs(~ Type + Selection, data=chocolate)
counts_brand<- xtabs(~ Brand + Selection, data=chocolate)
# Plot the counts
plot(counts_type, cex = 1.5)
plot(counts_brand, cex = 1.5)
# Use xtabs to count up how often each Type is chosen
counts_type <- xtabs(~ Type + Selection, data=chocolate)
counts_brand<- xtabs(~ Brand + Selection, data=chocolate)
counts_price <- xtabs(~ Price + Selection, data=chocolate)
# Plot the counts
plot(counts_type, cex = 1.5)
plot(counts_brand, cex = 1.5)
plot(counts_price, cex=1.5)
# Basic Calculations
8*6
